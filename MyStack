/**
    A class of stacks whose entries are stored in a chain of nodes.
    Implement all methods in MyStack class
    Main Reference : text book or class notes
    Do not change or add data fields 
*/

package PJ2;


public class MyStack<T> implements StackInterface<T>
{
   
   // Data fields
   private Node<T> topNode; // references the first node in the chain
   private int numberOfEntries;  
  
   public MyStack()
   {
      topNode = null;
      numberOfEntries = 0;
   } // end default constructor
  
   //add item to the stack
   public void push(T newEntry)
   {
       
       
      
        
        Node<T>  newNode = new Node<T>(newEntry);
        newNode.setNextNode(topNode);
        topNode = newNode;
        numberOfEntries++; 


   } // end push

   // retrieve the top
   public T peek()
   {
      if (empty()) throw new LispExpressionException();
      return topNode.getData();
  
     // return null;
   } // end peek

   
   
     // Delete and return the item most recently added to the stack.    
    public T pop()
   {
       if (empty()) throw new LispExpressionException();
        T data = topNode.getData();        
        topNode = topNode.getNextNode();            
        numberOfEntries--;
        return data;
     // return null;
   } // end pop

   //check if the stack is empty
   public boolean empty()
   {
       
      // add stataments
     // return false;
       return topNode == null;
   } // end empty

   public int size()
   {
      // add stataments
     // return 0;
       return numberOfEntries;
   } // end isEmpty

   public void clear()
   {
     
       while (!empty()){
           if (topNode != null){
               topNode = topNode.getNextNode();
               numberOfEntries--;
           }
       } 
       topNode = null;
   } // end clear

   public String toString()
   {
      // add stataments
      //return "";
       // add stataments
      StringBuilder s = new StringBuilder();
      s.append( "[");
      Node<T> current = topNode;
	while (current != null) {
	 s.append(current.getData() + ",");
			
	 current = current.getNextNode();
	}
        s.append( "]");
        return s.toString();
     // return "";

   }


      /****************************************************
      Do not modify: Stack test 

      Expected output:

	OK: stack is empty
	Push 3 data: 10, 30, 50
	Print stack [50,30,10,]
	OK: stack size is 3
	OK: peek stack top is 50
	OK: stack is not empty
	Pop 2 data: 50, 30
	Print stack [30,10,]
	Print stack [10,]
	OK: stack pop data is 30
	Clear stack
	Print stack []

   ******************************************************/



   public static void main (String args[])
   {
	MyStack<Integer> s = new MyStack<Integer>();
	if (s.empty()) 
            System.out.println("OK: stack is empty");
	else
            System.out.println("Error: stack is not empty");

	s.push(10);
	s.push(30);
	s.push(50);
        System.out.println("Push 3 data: 10, 30, 50");
        System.out.println("Print stack " + s);

	if (s.size() == 3) 
            System.out.println("OK: stack size is 3");
	else
            System.out.println("Error: stack size is " + s.size());

	if (s.peek() == 50) 
            System.out.println("OK: peek stack top is 50");
	else
            System.out.println("Error: peek stack top is " + s.size());

	if (!s.empty()) 
            System.out.println("OK: stack is not empty");
	else
            System.out.println("Error: stack is empty");

        System.out.println("Pop 2 data: 50, 30");
        s.pop();
        System.out.println("Print stack " + s);
	int data=s.pop();
        System.out.println("Print stack " + s);
	if (data == 30) 
            System.out.println("OK: stack pop data is 30");
	else
            System.out.println("Error: stack pop data is " + data);

        System.out.println("Clear stack");
        s.clear();
        System.out.println("Print stack " + s);
   }

   

} // end Stack
